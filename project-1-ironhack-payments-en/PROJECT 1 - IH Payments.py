import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv("project-1-ironhack-payments-en/project_dataset/extract-cashrequest-dataanalyst.csv")
df2 = pd.read_csv("project-1-ironhack-payments-en/project_dataset/extract-fees-dataanalyst-.csv")

df1.head()

df1.dtypes
print(df1.shape)
print(type(df1.shape))
print(df2.shape)
print(type(df2.shape))

df1['status'].unique()
df2['status'].unique()

df1.info()
df2.info()

#we are replacing NaN in some of the colums to None

replace_colums_1 = ['deleted_account_id', 'cash_request_received_date', 'money_back_date', 'send_at', 'recovery_status', 'reco_creation', 'reco_last_update']
df1[replace_colums_1] = df1[replace_colums_1].fillna('None')
replace_colums_1 = ['deleted_account_id', 'cash_request_received_date', 'money_back_date', 'send_at', 'recovery_status', 'reco_creation', 'reco_last_update']
df1[replace_colums_1] = df1[replace_colums_1].replace(0, None)

#Same for df2
replace_colums_2 = ['category', 'paid_at', 'from_date', 'to_date']
df2[replace_colums_2] = df2[replace_colums_2].fillna('None')
df2[replace_colums_2] = df2[replace_colums_2].replace('None', None)

df2.head()

df1['created_at'] = pd.to_datetime(df1['created_at'])
df1.head()

df1['cohort'] = pd.to_datetime(df1['created_at']).dt.to_period('M')
df2['cohort'] = pd.to_datetime(df2['created_at']).dt.to_period('M')
df1.head()

df1['request_month'] = df1['created_at'].dt.to_period('M')
df1['cohort_month'] = df1.groupby('user_id')['created_at'].transform('min').dt.to_period('M')
df1.head()

#create a reference DF with the posible combinations of cohort months and request months
cohort_months = df1['cohort_month'].unique()
request_months = df1['request_month'].unique()
index = pd.MultiIndex.from_product([cohort_months, request_months], names=['cohort_month', 'request_month'])
reference_df = pd.DataFrame(index=index).reset_index()

# Merge referemce DF with original data
merged_df = pd.merge(reference_df, df1, left_on=['cohort_month', 'request_month'], right_on=['cohort_month', 'request_month'], how='left')

# count frequency usage pe rmonth
cr_frequency = merged_df.groupby(['cohort_month', 'request_month']).size().unstack()


cr_frequency.plot(kind='line', marker='o')
plt.xlabel('Month')
plt.ylabel('Cash Requests')
plt.title('Frequency of Cash Requests Over Months')
plt.xticks(rotation=45)
plt.legend(title='Month', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

freq_df = df2.groupby(['cohort', 'type']).size().unstack(fill_value=0)
freq_df.plot(kind='bar', stacked=True)

freq_df = df2.groupby(['cohort', 'status']).size().unstack(fill_value=0)
freq_df.plot(kind='bar', stacked=True)

freq_df.plot(kind='area', stacked=True)
plt.xlabel('Month')
plt.ylabel('Number of transactionss')
plt.title('Transactions per type')
plt.show()

freq_df.plot(kind='area', stacked=True)
plt.xlabel('Month')
plt.ylabel('Number of transactions')
plt.title('Frequency for all status type')
plt.show()

incidents_df = df2[df2['type'] == 'incident']

incident_rate = incidents_df.groupby('cohort').size() / df2.groupby('cohort').size() * 100

incident_rate.plot(kind='bar')
plt.xlabel('Month')
plt.ylabel('Incident rate in %')
plt.title('Incident rate per month')
plt.show()

incident_rate.plot(kind='line', marker='o')
plt.xlabel('Month')
plt.ylabel('Incident Rate (%)')
plt.title('Incident Rate  Over Months')
plt.xticks(rotation=45)
plt.show()

df2['created_at'] = pd.to_datetime(df2['created_at'], errors='coerce')
df2['creation_month'] = df2['created_at'].dt.to_period('M')
df2['cohort_month'] = df2.groupby('id')['created_at'].transform('min').dt.to_period('M')

cohort_months2 = df2['cohort_month'].unique()
creation_months2 = df2['creation_month'].unique()
index = pd.MultiIndex.from_product([cohort_months2, creation_months2], names=['cohort_month', 'creation_month'])
reference_df = pd.DataFrame(index=index).reset_index()

# Merge DF with original data
merged_df2 = pd.merge(reference_df, df2, left_on=['cohort_month', 'creation_month'], right_on=['cohort_month', 'creation_month'], how='left')


#calculate revenue

revenue_month = merged_df2.groupby(['cohort_month', 'creation_month'])['total_amount'].sum().unstack()


revenue_month.plot(kind='line', marker='o')
plt.xlabel('Cohort Month')
plt.ylabel('Total Revenue')
plt.title('Total Revenue Generated by Each Cohort Over Months')
plt.xticks(rotation=45)
plt.legend(title='Request Month', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

#New relevant metric: refund processing rate (completed - money_back status)

new_metric_df = df1[(df1['status'] == 'money_back') & (df1['recovery_status'] == 'completed')]

#calculate it

total_completed_refunds = len(new_metric_df)
total_refunds = len(df1[df1['status'] == 'money_back'])
refund_processing_rate = (total_completed_refunds / total_refunds) * 100

refund_processing_rates = df1[df1['status'] == 'money_back'].groupby('cohort')['recovery_status'].apply(lambda x: (x == 'completed').mean() * 100)
refund_processing_rates.plot(kind='line', marker='o')

plt.xlabel('CMonth')
plt.ylabel('Refund Processing Rate (%)')
plt.title('Refund Processing Rate per month')
plt.grid(True)
